buildscript {
	repositories {
		jcenter()
		mavenCentral()
	}
	ext {
		lombokVersion = '1.18.8'
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.6.RELEASE")
		classpath("io.freefair.gradle:lombok-plugin:4.0.0")
	}
}

plugins {
	id 'org.springframework.boot' version '2.1.6.RELEASE'
	id 'java'
	id "com.github.sherter.google-java-format" version "0.8"
	id "io.freefair.lombok" version "4.0.0"
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.github.sherter.google-java-format'

googleJavaFormat {
	toolVersion '1.5'
	include '**/*.java'
	exclude '**/generated-sources/*'
}

group = 'com.tvlk.payment'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

repositories {
	mavenCentral()
	jcenter()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// lombok without gradle plugin - this may not work for ./gradlew wrapper
	/*compileOnly("org.projectlombok:lombok:${lombokVersion}")
	testCompileOnly("org.projectlombok:lombok:${lombokVersion}")
	annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
	testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")*/

	// jeasy Rule Engine
	compile 'org.jeasy:easy-rules-core:3.3.0'
	compile 'org.jeasy:easy-rules-spel:3.3.0'
	compile 'org.jeasy:easy-rules-mvel:3.3.0'

	// Scripting Engine
	compile group: 'org.codehaus.groovy', name: 'groovy', version: "2.5.7"
	compile group: 'org.codehaus.groovy', name: 'groovy-json', version: "2.5.7"
}

compileJava {
	dependsOn 'googleJavaFormat'
	options.encoding = 'UTF-8'
	options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

bootRun {
	doFirst {
		environment 'schema', "${buildSchema}"
		environment 'jooqJdbcUrl', "${jooqJdbcUrl}"
		environment 'jooqJdbcPassword', "${jooqJdbcPassword}"
		environment 'jooqJdbcUser', "${jooqJdbcUser}"
	}
}

test {
	/*doFirst {
		environment 'schema', "${buildSchema}"
		environment 'jooqJdbcUrl', "${jooqJdbcUrl}"
		environment 'jooqJdbcPassword', "${jooqJdbcPassword}"
		environment 'jooqJdbcUser', "${jooqJdbcUser}"
	}*/
}